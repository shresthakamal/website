generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    Int     @id @default(autoincrement())
  name  String?
  email String?  @unique
  password String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model News {
  id        Int       @id @default(autoincrement())
  slug      String    @unique
  title     String
  content   String
  excerpt   String?
  published Boolean   @default(true)
  featured  Boolean   @default(false)
  date      DateTime
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  Comment[]

  @@map("news")
}

model Experience {
  id           Int      @id @default(autoincrement())
  title        String
  company      String
  location     String
  period       String
  type         String
  description  String
  achievements Json
  technologies Json
  logoPath     String?
  logoType     String?
  startYear    Int
  sortOrder    Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([title, company])
  @@map("experiences")
}

model Comment {
  id          Int       @id @default(autoincrement())
  content     String
  authorName  String
  authorEmail String?
  blogSlug    String?
  newsId      Int?
  isApproved  Boolean   @default(true)
  isDeleted   Boolean   @default(false)
  parentId    Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  news        News?     @relation(fields: [newsId], references: [id], onDelete: Cascade)
  parent      Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies     Comment[] @relation("CommentReplies")

  @@index([blogSlug, isApproved, isDeleted])
  @@index([newsId, isApproved, isDeleted])
  @@index([parentId])
  @@map("comments")
}
